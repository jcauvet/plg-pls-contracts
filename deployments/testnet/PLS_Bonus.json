{
  "address": "0xA9132437D0d02A07d61c975ed6bA1B6a8D30558B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bonusToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBonus",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "bonus",
          "type": "uint256[]"
        }
      ],
      "name": "addBonusForUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "plsGame",
      "outputs": [
        {
          "internalType": "contract IPLSGame",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxBonus",
          "type": "uint256"
        }
      ],
      "name": "setMaxBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_plsGameAdd",
          "type": "address"
        }
      ],
      "name": "setPlsGameAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawAllToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f40f31e37e69ee1c9ab6747800c9a21003afe1cc75e2efa60e0ceb5e2cb4009",
  "receipt": {
    "to": null,
    "from": "0x67BCD0429d589085F618579A5C09bdE5a42740C7",
    "contractAddress": "0xA9132437D0d02A07d61c975ed6bA1B6a8D30558B",
    "transactionIndex": 0,
    "gasUsed": "1585120",
    "logsBloom": "0x
    "blockHash": "0x2cae88e1f71e8596def5286746f8fe4d59bf35e60beca5bc3c5504faf1dbffcc",
    "transactionHash": "0x2f40f31e37e69ee1c9ab6747800c9a21003afe1cc75e2efa60e0ceb5e2cb4009",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22389958,
        "transactionHash": "0x2f40f31e37e69ee1c9ab6747800c9a21003afe1cc75e2efa60e0ceb5e2cb4009",
        "address": "0xA9132437D0d02A07d61c975ed6bA1B6a8D30558B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000067bcd0429d589085f618579a5c09bde5a42740c7"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2cae88e1f71e8596def5286746f8fe4d59bf35e60beca5bc3c5504faf1dbffcc"
      }
    ],
    "blockNumber": 22389958,
    "cumulativeGasUsed": "1585120",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF1E669a7481d30F225622b6BE0e79bB5fD339336",
    "100"
  ],
  "numDeployments": 1,
  "solcInputHash": "9c1463f2520861d14f8850777a70d981",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bonusToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bonus\",\"type\":\"uint256[]\"}],\"name\":\"addBonusForUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsGame\",\"outputs\":[{\"internalType\":\"contract IPLSGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBonus\",\"type\":\"uint256\"}],\"name\":\"setMaxBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plsGameAdd\",\"type\":\"address\"}],\"name\":\"setPlsGameAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAllToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PLS_Bonus.sol\":\"PLS_Bonus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PLS_Bonus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IPLSGame {\\n    function depositBonusForUser(address user, uint256 amt) external;\\n}\\n\\ncontract PLS_Bonus is Ownable {\\n    using SafeERC20 for ERC20;\\n\\n    ERC20 public bonusToken;\\n    uint256 public maxBonus;\\n    uint256 public tokenDebt;\\n    IPLSGame public plsGame;\\n    mapping(address => uint256) public userBonus;\\n\\n    constructor(address _bonusToken, uint256 _maxBonus) {\\n        bonusToken = ERC20(_bonusToken);\\n        setMaxBonus(_maxBonus);\\n    }\\n\\n    // Allows a user to claim their bonus\\n    function claimBonus() external {\\n        require(userBonus[msg.sender] != 0, \\\"No bonus for user\\\");\\n        uint256 claimAmt = userBonus[msg.sender];\\n        userBonus[msg.sender] = 0;\\n        tokenDebt -= claimAmt;\\n        bonusToken.safeTransfer(address(plsGame), claimAmt);\\n        plsGame.depositBonusForUser(msg.sender, claimAmt);\\n    }\\n\\n    //\\n    // ADMIN ONLY FUNCTIONS\\n    //\\n    function setMaxBonus(uint256 _maxBonus) public onlyOwner {\\n        maxBonus = _maxBonus;\\n    }\\n\\n    function setPlsGameAdd(address _plsGameAdd) public onlyOwner {\\n        plsGame = IPLSGame(_plsGameAdd);\\n    }\\n\\n    // Add bonuses for users. New bonuses get added to old bonuses if any\\n    function addBonusForUsers(address[] calldata accs, uint256[] calldata bonus) external onlyOwner {\\n        require(accs.length == bonus.length, \\\"Invalid Data: Unequal arrays\\\");\\n        for (uint256 i = 0; i < accs.length; i++) {\\n            require(bonus[i] <= maxBonus, \\\"Bonus amount exceeds max permissable bonus\\\");\\n            userBonus[accs[i]] += bonus[i];\\n            tokenDebt += bonus[i];\\n        }\\n    }\\n\\n    // Withdraw a certain amount of a token\\n    function withdrawToken(address token, uint256 amt) public onlyOwner {\\n        ERC20(token).safeTransfer(owner(), amt);\\n    }\\n\\n    // Withdraw complete amount of a token\\n    function withdrawAllToken(address token) external onlyOwner {\\n        uint256 bal = ERC20(token).balanceOf(address(this));\\n        withdrawToken(token, bal);\\n    }\\n}\\n\",\"keccak256\":\"0x1b655b78422d4853729baa6309e722f3737841f20e6e5e212e85e0c652a6b707\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e2438038062001e248339818101604052810190620000379190620002e4565b620000576200004b620000b160201b60201c565b620000b960201b60201c565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000a9816200017d60201b60201c565b5050620003ae565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200018d620000b160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001b36200021660201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200020c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000203906200038c565b60405180910390fd5b8060028190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002718262000244565b9050919050565b620002838162000264565b81146200028f57600080fd5b50565b600081519050620002a38162000278565b92915050565b6000819050919050565b620002be81620002a9565b8114620002ca57600080fd5b50565b600081519050620002de81620002b3565b92915050565b60008060408385031215620002fe57620002fd6200023f565b5b60006200030e8582860162000292565b92505060206200032185828601620002cd565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620003746020836200032b565b915062000381826200033c565b602082019050919050565b60006020820190508181036000830152620003a78162000365565b9050919050565b611a6680620003be6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635610e5c41161008c5780638da5cb5b116100665780638da5cb5b146101ff5780639e281a981461021d578063ae4dd0fc14610239578063f2fde38b14610255576100ea565b80635610e5c4146101bb578063715018a6146101d957806373ffb854146101e3576100ea565b80633eed0b14116100c85780633eed0b141461015957806341d4a1ab14610175578063506353941461019357806354c5b6961461019d576100ea565b8063158cb274146100ef57806315d2a7b91461010d5780631d94f3e91461013d575b600080fd5b6100f7610271565b6040516101049190610fb9565b60405180910390f35b6101276004803603810190610122919061103c565b610277565b6040516101349190610fb9565b60405180910390f35b61015760048036038101906101529190611124565b61028f565b005b610173600480360381019061016e91906111d1565b6104a1565b005b61017d610527565b60405161018a919061125d565b60405180910390f35b61019b61054d565b005b6101a5610773565b6040516101b29190610fb9565b60405180910390f35b6101c3610779565b6040516101d09190611299565b60405180910390f35b6101e161079f565b005b6101fd60048036038101906101f8919061103c565b610827565b005b6102076108e7565b60405161021491906112c3565b60405180910390f35b610237600480360381019061023291906112de565b610910565b005b610253600480360381019061024e919061103c565b6109c2565b005b61026f600480360381019061026a919061103c565b610ad9565b005b60035481565b60056020528060005260406000206000915090505481565b610297610bd1565b73ffffffffffffffffffffffffffffffffffffffff166102b56108e7565b73ffffffffffffffffffffffffffffffffffffffff161461030b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103029061137b565b60405180910390fd5b818190508484905014610353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a906113e7565b60405180910390fd5b60005b8484905081101561049a5760025483838381811061037757610376611407565b5b9050602002013511156103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b6906114a8565b60405180910390fd5b8282828181106103d2576103d1611407565b5b90506020020135600560008787858181106103f0576103ef611407565b5b9050602002016020810190610405919061103c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461044e91906114f7565b9250508190555082828281811061046857610467611407565b5b905060200201356003600082825461048091906114f7565b9250508190555080806104929061154d565b915050610356565b5050505050565b6104a9610bd1565b73ffffffffffffffffffffffffffffffffffffffff166104c76108e7565b73ffffffffffffffffffffffffffffffffffffffff161461051d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105149061137b565b60405180910390fd5b8060028190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156105d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c7906115e2565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806003600082825461066b9190611602565b925050819055506106e1600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610bd99092919063ffffffff16565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca3fa7f33836040518363ffffffff1660e01b815260040161073e929190611636565b600060405180830381600087803b15801561075857600080fd5b505af115801561076c573d6000803e3d6000fd5b5050505050565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107a7610bd1565b73ffffffffffffffffffffffffffffffffffffffff166107c56108e7565b73ffffffffffffffffffffffffffffffffffffffff161461081b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108129061137b565b60405180910390fd5b6108256000610c5f565b565b61082f610bd1565b73ffffffffffffffffffffffffffffffffffffffff1661084d6108e7565b73ffffffffffffffffffffffffffffffffffffffff16146108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089a9061137b565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610918610bd1565b73ffffffffffffffffffffffffffffffffffffffff166109366108e7565b73ffffffffffffffffffffffffffffffffffffffff161461098c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109839061137b565b60405180910390fd5b6109be6109976108e7565b828473ffffffffffffffffffffffffffffffffffffffff16610bd99092919063ffffffff16565b5050565b6109ca610bd1565b73ffffffffffffffffffffffffffffffffffffffff166109e86108e7565b73ffffffffffffffffffffffffffffffffffffffff1614610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a359061137b565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a7991906112c3565b60206040518083038186803b158015610a9157600080fd5b505afa158015610aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac99190611674565b9050610ad58282610910565b5050565b610ae1610bd1565b73ffffffffffffffffffffffffffffffffffffffff16610aff6108e7565b73ffffffffffffffffffffffffffffffffffffffff1614610b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4c9061137b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbc90611713565b60405180910390fd5b610bce81610c5f565b50565b600033905090565b610c5a8363a9059cbb60e01b8484604051602401610bf8929190611636565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d23565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000610d85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610dea9092919063ffffffff16565b9050600081511115610de55780806020019051810190610da5919061176b565b610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb9061180a565b60405180910390fd5b5b505050565b6060610df98484600085610e02565b90509392505050565b606082471015610e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3e9061189c565b60405180910390fd5b610e5085610f16565b610e8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8690611908565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610eb891906119a2565b60006040518083038185875af1925050503d8060008114610ef5576040519150601f19603f3d011682016040523d82523d6000602084013e610efa565b606091505b5091509150610f0a828286610f39565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610f4957829050610f99565b600083511115610f5c5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f909190611a0e565b60405180910390fd5b9392505050565b6000819050919050565b610fb381610fa0565b82525050565b6000602082019050610fce6000830184610faa565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061100982610fde565b9050919050565b61101981610ffe565b811461102457600080fd5b50565b60008135905061103681611010565b92915050565b60006020828403121561105257611051610fd4565b5b600061106084828501611027565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261108e5761108d611069565b5b8235905067ffffffffffffffff8111156110ab576110aa61106e565b5b6020830191508360208202830111156110c7576110c6611073565b5b9250929050565b60008083601f8401126110e4576110e3611069565b5b8235905067ffffffffffffffff8111156111015761110061106e565b5b60208301915083602082028301111561111d5761111c611073565b5b9250929050565b6000806000806040858703121561113e5761113d610fd4565b5b600085013567ffffffffffffffff81111561115c5761115b610fd9565b5b61116887828801611078565b9450945050602085013567ffffffffffffffff81111561118b5761118a610fd9565b5b611197878288016110ce565b925092505092959194509250565b6111ae81610fa0565b81146111b957600080fd5b50565b6000813590506111cb816111a5565b92915050565b6000602082840312156111e7576111e6610fd4565b5b60006111f5848285016111bc565b91505092915050565b6000819050919050565b600061122361121e61121984610fde565b6111fe565b610fde565b9050919050565b600061123582611208565b9050919050565b60006112478261122a565b9050919050565b6112578161123c565b82525050565b6000602082019050611272600083018461124e565b92915050565b60006112838261122a565b9050919050565b61129381611278565b82525050565b60006020820190506112ae600083018461128a565b92915050565b6112bd81610ffe565b82525050565b60006020820190506112d860008301846112b4565b92915050565b600080604083850312156112f5576112f4610fd4565b5b600061130385828601611027565b9250506020611314858286016111bc565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061136560208361131e565b91506113708261132f565b602082019050919050565b6000602082019050818103600083015261139481611358565b9050919050565b7f496e76616c696420446174613a20556e657175616c2061727261797300000000600082015250565b60006113d1601c8361131e565b91506113dc8261139b565b602082019050919050565b60006020820190508181036000830152611400816113c4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f426f6e757320616d6f756e742065786365656473206d6178207065726d69737360008201527f61626c6520626f6e757300000000000000000000000000000000000000000000602082015250565b6000611492602a8361131e565b915061149d82611436565b604082019050919050565b600060208201905081810360008301526114c181611485565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061150282610fa0565b915061150d83610fa0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611542576115416114c8565b5b828201905092915050565b600061155882610fa0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561158b5761158a6114c8565b5b600182019050919050565b7f4e6f20626f6e757320666f722075736572000000000000000000000000000000600082015250565b60006115cc60118361131e565b91506115d782611596565b602082019050919050565b600060208201905081810360008301526115fb816115bf565b9050919050565b600061160d82610fa0565b915061161883610fa0565b92508282101561162b5761162a6114c8565b5b828203905092915050565b600060408201905061164b60008301856112b4565b6116586020830184610faa565b9392505050565b60008151905061166e816111a5565b92915050565b60006020828403121561168a57611689610fd4565b5b60006116988482850161165f565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006116fd60268361131e565b9150611708826116a1565b604082019050919050565b6000602082019050818103600083015261172c816116f0565b9050919050565b60008115159050919050565b61174881611733565b811461175357600080fd5b50565b6000815190506117658161173f565b92915050565b60006020828403121561178157611780610fd4565b5b600061178f84828501611756565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006117f4602a8361131e565b91506117ff82611798565b604082019050919050565b60006020820190508181036000830152611823816117e7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061188660268361131e565b91506118918261182a565b604082019050919050565b600060208201905081810360008301526118b581611879565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006118f2601d8361131e565b91506118fd826118bc565b602082019050919050565b60006020820190508181036000830152611921816118e5565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561195c578082015181840152602081019050611941565b8381111561196b576000848401525b50505050565b600061197c82611928565b6119868185611933565b935061199681856020860161193e565b80840191505092915050565b60006119ae8284611971565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006119e0826119b9565b6119ea818561131e565b93506119fa81856020860161193e565b611a03816119c4565b840191505092915050565b60006020820190508181036000830152611a2881846119d5565b90509291505056fea26469706673582212204e3ac0a340811840af912e23fb12a9b09b1447eef38f77bba918f50b6591ccbc64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635610e5c41161008c5780638da5cb5b116100665780638da5cb5b146101ff5780639e281a981461021d578063ae4dd0fc14610239578063f2fde38b14610255576100ea565b80635610e5c4146101bb578063715018a6146101d957806373ffb854146101e3576100ea565b80633eed0b14116100c85780633eed0b141461015957806341d4a1ab14610175578063506353941461019357806354c5b6961461019d576100ea565b8063158cb274146100ef57806315d2a7b91461010d5780631d94f3e91461013d575b600080fd5b6100f7610271565b6040516101049190610fb9565b60405180910390f35b6101276004803603810190610122919061103c565b610277565b6040516101349190610fb9565b60405180910390f35b61015760048036038101906101529190611124565b61028f565b005b610173600480360381019061016e91906111d1565b6104a1565b005b61017d610527565b60405161018a919061125d565b60405180910390f35b61019b61054d565b005b6101a5610773565b6040516101b29190610fb9565b60405180910390f35b6101c3610779565b6040516101d09190611299565b60405180910390f35b6101e161079f565b005b6101fd60048036038101906101f8919061103c565b610827565b005b6102076108e7565b60405161021491906112c3565b60405180910390f35b610237600480360381019061023291906112de565b610910565b005b610253600480360381019061024e919061103c565b6109c2565b005b61026f600480360381019061026a919061103c565b610ad9565b005b60035481565b60056020528060005260406000206000915090505481565b610297610bd1565b73ffffffffffffffffffffffffffffffffffffffff166102b56108e7565b73ffffffffffffffffffffffffffffffffffffffff161461030b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103029061137b565b60405180910390fd5b818190508484905014610353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a906113e7565b60405180910390fd5b60005b8484905081101561049a5760025483838381811061037757610376611407565b5b9050602002013511156103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b6906114a8565b60405180910390fd5b8282828181106103d2576103d1611407565b5b90506020020135600560008787858181106103f0576103ef611407565b5b9050602002016020810190610405919061103c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461044e91906114f7565b9250508190555082828281811061046857610467611407565b5b905060200201356003600082825461048091906114f7565b9250508190555080806104929061154d565b915050610356565b5050505050565b6104a9610bd1565b73ffffffffffffffffffffffffffffffffffffffff166104c76108e7565b73ffffffffffffffffffffffffffffffffffffffff161461051d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105149061137b565b60405180910390fd5b8060028190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156105d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c7906115e2565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806003600082825461066b9190611602565b925050819055506106e1600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610bd99092919063ffffffff16565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fca3fa7f33836040518363ffffffff1660e01b815260040161073e929190611636565b600060405180830381600087803b15801561075857600080fd5b505af115801561076c573d6000803e3d6000fd5b5050505050565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107a7610bd1565b73ffffffffffffffffffffffffffffffffffffffff166107c56108e7565b73ffffffffffffffffffffffffffffffffffffffff161461081b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108129061137b565b60405180910390fd5b6108256000610c5f565b565b61082f610bd1565b73ffffffffffffffffffffffffffffffffffffffff1661084d6108e7565b73ffffffffffffffffffffffffffffffffffffffff16146108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089a9061137b565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610918610bd1565b73ffffffffffffffffffffffffffffffffffffffff166109366108e7565b73ffffffffffffffffffffffffffffffffffffffff161461098c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109839061137b565b60405180910390fd5b6109be6109976108e7565b828473ffffffffffffffffffffffffffffffffffffffff16610bd99092919063ffffffff16565b5050565b6109ca610bd1565b73ffffffffffffffffffffffffffffffffffffffff166109e86108e7565b73ffffffffffffffffffffffffffffffffffffffff1614610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a359061137b565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a7991906112c3565b60206040518083038186803b158015610a9157600080fd5b505afa158015610aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac99190611674565b9050610ad58282610910565b5050565b610ae1610bd1565b73ffffffffffffffffffffffffffffffffffffffff16610aff6108e7565b73ffffffffffffffffffffffffffffffffffffffff1614610b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4c9061137b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbc90611713565b60405180910390fd5b610bce81610c5f565b50565b600033905090565b610c5a8363a9059cbb60e01b8484604051602401610bf8929190611636565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d23565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000610d85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610dea9092919063ffffffff16565b9050600081511115610de55780806020019051810190610da5919061176b565b610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb9061180a565b60405180910390fd5b5b505050565b6060610df98484600085610e02565b90509392505050565b606082471015610e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3e9061189c565b60405180910390fd5b610e5085610f16565b610e8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8690611908565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610eb891906119a2565b60006040518083038185875af1925050503d8060008114610ef5576040519150601f19603f3d011682016040523d82523d6000602084013e610efa565b606091505b5091509150610f0a828286610f39565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610f4957829050610f99565b600083511115610f5c5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f909190611a0e565b60405180910390fd5b9392505050565b6000819050919050565b610fb381610fa0565b82525050565b6000602082019050610fce6000830184610faa565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061100982610fde565b9050919050565b61101981610ffe565b811461102457600080fd5b50565b60008135905061103681611010565b92915050565b60006020828403121561105257611051610fd4565b5b600061106084828501611027565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261108e5761108d611069565b5b8235905067ffffffffffffffff8111156110ab576110aa61106e565b5b6020830191508360208202830111156110c7576110c6611073565b5b9250929050565b60008083601f8401126110e4576110e3611069565b5b8235905067ffffffffffffffff8111156111015761110061106e565b5b60208301915083602082028301111561111d5761111c611073565b5b9250929050565b6000806000806040858703121561113e5761113d610fd4565b5b600085013567ffffffffffffffff81111561115c5761115b610fd9565b5b61116887828801611078565b9450945050602085013567ffffffffffffffff81111561118b5761118a610fd9565b5b611197878288016110ce565b925092505092959194509250565b6111ae81610fa0565b81146111b957600080fd5b50565b6000813590506111cb816111a5565b92915050565b6000602082840312156111e7576111e6610fd4565b5b60006111f5848285016111bc565b91505092915050565b6000819050919050565b600061122361121e61121984610fde565b6111fe565b610fde565b9050919050565b600061123582611208565b9050919050565b60006112478261122a565b9050919050565b6112578161123c565b82525050565b6000602082019050611272600083018461124e565b92915050565b60006112838261122a565b9050919050565b61129381611278565b82525050565b60006020820190506112ae600083018461128a565b92915050565b6112bd81610ffe565b82525050565b60006020820190506112d860008301846112b4565b92915050565b600080604083850312156112f5576112f4610fd4565b5b600061130385828601611027565b9250506020611314858286016111bc565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061136560208361131e565b91506113708261132f565b602082019050919050565b6000602082019050818103600083015261139481611358565b9050919050565b7f496e76616c696420446174613a20556e657175616c2061727261797300000000600082015250565b60006113d1601c8361131e565b91506113dc8261139b565b602082019050919050565b60006020820190508181036000830152611400816113c4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f426f6e757320616d6f756e742065786365656473206d6178207065726d69737360008201527f61626c6520626f6e757300000000000000000000000000000000000000000000602082015250565b6000611492602a8361131e565b915061149d82611436565b604082019050919050565b600060208201905081810360008301526114c181611485565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061150282610fa0565b915061150d83610fa0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611542576115416114c8565b5b828201905092915050565b600061155882610fa0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561158b5761158a6114c8565b5b600182019050919050565b7f4e6f20626f6e757320666f722075736572000000000000000000000000000000600082015250565b60006115cc60118361131e565b91506115d782611596565b602082019050919050565b600060208201905081810360008301526115fb816115bf565b9050919050565b600061160d82610fa0565b915061161883610fa0565b92508282101561162b5761162a6114c8565b5b828203905092915050565b600060408201905061164b60008301856112b4565b6116586020830184610faa565b9392505050565b60008151905061166e816111a5565b92915050565b60006020828403121561168a57611689610fd4565b5b60006116988482850161165f565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006116fd60268361131e565b9150611708826116a1565b604082019050919050565b6000602082019050818103600083015261172c816116f0565b9050919050565b60008115159050919050565b61174881611733565b811461175357600080fd5b50565b6000815190506117658161173f565b92915050565b60006020828403121561178157611780610fd4565b5b600061178f84828501611756565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006117f4602a8361131e565b91506117ff82611798565b604082019050919050565b60006020820190508181036000830152611823816117e7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061188660268361131e565b91506118918261182a565b604082019050919050565b600060208201905081810360008301526118b581611879565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006118f2601d8361131e565b91506118fd826118bc565b602082019050919050565b60006020820190508181036000830152611921816118e5565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561195c578082015181840152602081019050611941565b8381111561196b576000848401525b50505050565b600061197c82611928565b6119868185611933565b935061199681856020860161193e565b80840191505092915050565b60006119ae8284611971565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006119e0826119b9565b6119ea818561131e565b93506119fa81856020860161193e565b611a03816119c4565b840191505092915050565b60006020820190508181036000830152611a2881846119d5565b90509291505056fea26469706673582212204e3ac0a340811840af912e23fb12a9b09b1447eef38f77bba918f50b6591ccbc64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PLS_Bonus.sol:PLS_Bonus",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2063,
        "contract": "contracts/PLS_Bonus.sol:PLS_Bonus",
        "label": "bonusToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC20)692"
      },
      {
        "astId": 2065,
        "contract": "contracts/PLS_Bonus.sol:PLS_Bonus",
        "label": "maxBonus",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2067,
        "contract": "contracts/PLS_Bonus.sol:PLS_Bonus",
        "label": "tokenDebt",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2070,
        "contract": "contracts/PLS_Bonus.sol:PLS_Bonus",
        "label": "plsGame",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPLSGame)2054"
      },
      {
        "astId": 2074,
        "contract": "contracts/PLS_Bonus.sol:PLS_Bonus",
        "label": "userBonus",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)692": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPLSGame)2054": {
        "encoding": "inplace",
        "label": "contract IPLSGame",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}