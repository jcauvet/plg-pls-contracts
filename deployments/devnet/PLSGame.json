{
  "address": "0x9497fE2C8C55941df573dd31d0f543ba12eF4dEe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_plsBonus",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "addGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "depositBonusForUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "gameExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "string",
          "name": "gameId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "platFee",
          "type": "uint256"
        },
        {
          "internalType": "enum PLSGame.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "markGameComplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isMutualQuit",
          "type": "bool"
        }
      ],
      "name": "markGameIncomplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "plsBonus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "refundClaimed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_plsBonus",
          "type": "address"
        }
      ],
      "name": "setBonusAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeWallet",
          "type": "address"
        }
      ],
      "name": "setFeeWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_platFee",
          "type": "uint256"
        }
      ],
      "name": "setPlatfee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "wallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08cb2a1e60e1726bbec28e82c14ea1d6815abd4e3756e0b6bee1cdba3ec458cd",
  "receipt": {
    "to": null,
    "from": "0x67BCD0429d589085F618579A5C09bdE5a42740C7",
    "contractAddress": "0x9497fE2C8C55941df573dd31d0f543ba12eF4dEe",
    "transactionIndex": 0,
    "gasUsed": "2842737",
    "logsBloom": "0x
    "blockHash": "0x95c9fff5bc5abd2165cd984ff59db39cf2cdef3fb21ae0da92e493b706505bae",
    "transactionHash": "0x08cb2a1e60e1726bbec28e82c14ea1d6815abd4e3756e0b6bee1cdba3ec458cd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7061095,
        "transactionHash": "0x08cb2a1e60e1726bbec28e82c14ea1d6815abd4e3756e0b6bee1cdba3ec458cd",
        "address": "0x9497fE2C8C55941df573dd31d0f543ba12eF4dEe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000067bcd0429d589085f618579a5c09bde5a42740c7"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x95c9fff5bc5abd2165cd984ff59db39cf2cdef3fb21ae0da92e493b706505bae"
      }
    ],
    "blockNumber": 7061095,
    "cumulativeGasUsed": "2842737",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5F7937ae6118490d1eB6768FE014Cd7BB5c5bF28",
    "0x62E60A2561d64c467D5dB0d1a0e68A8F15EB5626"
  ],
  "numDeployments": 2,
  "solcInputHash": "6c148336d1ae41bfd3005c4f9eea5a03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_plsBonus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"addGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"depositBonusForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gameExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platFee\",\"type\":\"uint256\"},{\"internalType\":\"enum PLSGame.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"markGameComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isMutualQuit\",\"type\":\"bool\"}],\"name\":\"markGameIncomplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsBonus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"refundClaimed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plsBonus\",\"type\":\"address\"}],\"name\":\"setBonusAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platFee\",\"type\":\"uint256\"}],\"name\":\"setPlatfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PLSGame.sol\":\"PLSGame\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PLSGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract PLSGame is Ownable {\\n    using SafeERC20 for ERC20;\\n\\n    enum Status {\\n        Initiated,\\n        Completed,\\n        Aborted,\\n        MutualQuit\\n    }\\n    // Initiated : Game started, players money in escrow\\n    // Completed: Game completed (Win/Loss)\\n    // Aborted: Game ended by mutual quit\\n\\n    // Game Data Structure\\n    struct Game {\\n        string gameId;\\n        address player1;\\n        address player2;\\n        address winner;\\n        uint256 deposit; // deposit per user\\n        uint256 platFee;\\n        Status status;\\n    }\\n\\n    uint256 public platFee = 2000; // 20%\\n    ERC20 immutable public token; // game currency token\\n    address public feeWallet; // Wallet which receives earnings from game\\n    address public plsBonus;\\n\\n    mapping(address => uint256) public wallet; // User's virtual wallets // .wallet(\\\"0x1234\\\")\\n    mapping(string => Game) public games; // all games\\n    mapping(string => bool) public gameExists; // whether gameId has been used before\\n    mapping(string => address) public refundClaimed; // maintain whether refund was claimed as a separate mapping for optimisation\\n\\n    constructor(address _token, address _plsBonus) {\\n        token = ERC20(_token);\\n        feeWallet = msg.sender;\\n        plsBonus = _plsBonus;\\n    }\\n\\n    modifier checkGameExists(string memory gameId) {\\n        require(gameExists[gameId], \\\"Game does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyBonusContract() {\\n        require(msg.sender == plsBonus, \\\"Caller not bonus contract\\\");\\n        _;\\n    }\\n\\n    function depositBonusForUser(address user, uint256 amt) external onlyBonusContract {\\n        wallet[user] += amt;\\n    }\\n\\n    // Deposit tokens to user's virtual wallet\\n    function depositToken(uint256 amt) external {\\n        wallet[msg.sender] += amt;\\n        token.safeTransferFrom(msg.sender, address(this), amt);\\n    }\\n\\n    // Withdraw funds from user's virtual wallet\\n    function withdrawToken(uint256 amt) external {\\n        require(amt <= wallet[msg.sender], \\\"Insufficient Balance\\\");\\n        wallet[msg.sender] -= amt;\\n        token.safeTransfer(msg.sender, amt);\\n    }\\n\\n    // Start a new game\\n    function addGame(\\n        string calldata gameId,\\n        address player1,\\n        address player2,\\n        uint256 deposit\\n    ) external onlyOwner {\\n        require(!gameExists[gameId], \\\"Repeated Game ID\\\");\\n        require(deposit <= wallet[player1], \\\"Insufficient Balance:Player 1\\\");\\n        require(deposit <= wallet[player2], \\\"Insufficient Balance:Player 2\\\");\\n        // Put user's money in escrow\\n        wallet[player1] -= deposit;\\n        wallet[player2] -= deposit;\\n        // Create entry for game\\n        gameExists[gameId] = true;\\n        games[gameId] = Game({\\n            gameId: gameId,\\n            player1: player1,\\n            player2: player2,\\n            winner: address(0),\\n            deposit: deposit,\\n            platFee: platFee,\\n            status: Status.Initiated\\n        });\\n    }\\n\\n    // Update winner for game. Transfer money to admin wallet & user's admin wallet\\n    function markGameComplete(string calldata gameId, address winner) external onlyOwner checkGameExists(gameId) {\\n        Game storage game = games[gameId];\\n        require(game.status == Status.Initiated, \\\"Game not in initial state\\\");\\n        require(winner == game.player1 || winner == game.player2, \\\"Winner address is not a participant\\\");\\n        // Update game status\\n        game.status = Status.Completed;\\n        game.winner = winner;\\n        // Distribute money\\n        uint256 totalGamePrize = 2 * game.deposit;\\n        uint256 platFeeAmt = (totalGamePrize * game.platFee) / 10000;\\n        wallet[winner] += totalGamePrize - platFeeAmt;\\n        // Transfer fee to platform wallet\\n        token.safeTransfer(feeWallet, platFeeAmt);\\n    }\\n\\n    // End game with mutual quit. Refund balances to virtual wallets\\n    function markGameIncomplete(string calldata gameId, bool isMutualQuit) external onlyOwner checkGameExists(gameId) {\\n        Game storage game = games[gameId];\\n        require(game.status == Status.Initiated, \\\"Game not in initial state\\\");\\n        game.status = (isMutualQuit ? Status.MutualQuit : Status.Aborted);\\n        // Refund balances to user\\n        wallet[game.player1] += game.deposit;\\n        wallet[game.player2] += game.deposit;\\n    }\\n\\n    // Set value for platform fees\\n    function setPlatfee(uint256 _platFee) external onlyOwner {\\n        require(_platFee <= 4000, \\\"Fee threshold exceeded\\\");\\n        platFee = _platFee;\\n    }\\n\\n    // Set address for fee wallet\\n    function setFeeWallet(address _feeWallet) external onlyOwner {\\n        require(_feeWallet != address(0), \\\"Invalid fee wallet\\\");\\n        feeWallet = _feeWallet;\\n    }\\n\\n    // Set address for bonus contract\\n    function setBonusAddress(address _plsBonus) external onlyOwner {\\n        require(_plsBonus != address(0), \\\"Invalid bonus address\\\");\\n        plsBonus = _plsBonus;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x70b179ec536193951de6449b1d3908ec1e8e411318fde8f131cd672eb62c3604\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526107d06001553480156200001757600080fd5b50604051620033c2380380620033c283398181016040528101906200003d919062000251565b6200005d620000516200011b60201b60201c565b6200012360201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000298565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021982620001ec565b9050919050565b6200022b816200020c565b81146200023757600080fd5b50565b6000815190506200024b8162000220565b92915050565b600080604083850312156200026b576200026a620001e7565b5b60006200027b858286016200023a565b92505060206200028e858286016200023a565b9150509250929050565b6080516130f9620002c9600039600081816109df01528181610a840152818161172c01526118bf01526130f96000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063f2373a5511610071578063f2373a551461031d578063f25f4b561461033b578063f2fde38b14610359578063fc0c546a14610375578063fca3fa7f146103935761012c565b80638da5cb5b1461027b57806390d49b9d14610299578063a56cc439146102b5578063c97f8363146102e5578063d1bb40a7146103015761012c565b80636400619e116100f45780636400619e146101d35780636d20931a14610203578063715018a614610239578063733f90ae146102435780638d4cc5451461025f5761012c565b80633c07d9ef146101315780633f15670c146101615780634e014fa51461017d57806350baa6221461019b5780636215be77146101b7575b600080fd5b61014b60048036038101906101469190612020565b6103af565b60405161015891906120aa565b60405180910390f35b61017b60048036038101906101769190612187565b6103f8565b005b6101856108fa565b604051610192919061221e565b60405180910390f35b6101b560048036038101906101b09190612239565b610900565b005b6101d160048036038101906101cc9190612239565b610a26565b005b6101ed60048036038101906101e89190612020565b610acc565b6040516101fa9190612281565b60405180910390f35b61021d60048036038101906102189190612020565b610b02565b604051610230979695949392919061239b565b60405180910390f35b610241610c4f565b005b61025d6004803603810190610258919061243d565b610cd7565b005b61027960048036038101906102749190612239565b610fdc565b005b6102836110a7565b60405161029091906120aa565b60405180910390f35b6102b360048036038101906102ae919061249d565b6110d0565b005b6102cf60048036038101906102ca919061249d565b611200565b6040516102dc919061221e565b60405180910390f35b6102ff60048036038101906102fa919061249d565b611218565b005b61031b600480360381019061031691906124ca565b611348565b005b610325611779565b60405161033291906120aa565b60405180910390f35b61034361179f565b60405161035091906120aa565b60405180910390f35b610373600480360381019061036e919061249d565b6117c5565b005b61037d6118bd565b60405161038a9190612589565b60405180910390f35b6103ad60048036038101906103a891906125a4565b6118e1565b005b6007818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104006119cb565b73ffffffffffffffffffffffffffffffffffffffff1661041e6110a7565b73ffffffffffffffffffffffffffffffffffffffff1614610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046b90612630565b60405180910390fd5b60068585604051610486929190612680565b908152602001604051809103902060009054906101000a900460ff16156104e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d9906126e5565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b90612751565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd906127bd565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610635919061280c565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461068b919061280c565b925050819055506001600686866040516106a6929190612680565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506040518060e0016040528086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200182815260200160015481526020016000600381111561079757610796612324565b5b815250600586866040516107ac929190612680565b908152602001604051809103902060008201518160000190805190602001906107d6929190611e23565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff021916908360038111156108eb576108ea612324565b5b02179055509050505050505050565b60015481565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610982576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109799061288c565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109d1919061280c565b92505081905550610a2333827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166119d39092919063ffffffff16565b50565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a7591906128ac565b92505081905550610ac93330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611a59909392919063ffffffff16565b50565b6006818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b600581805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610b3b90612931565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6790612931565b8015610bb45780601f10610b8957610100808354040283529160200191610bb4565b820191906000526020600020905b815481529060010190602001808311610b9757829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154908060060160009054906101000a900460ff16905087565b610c576119cb565b73ffffffffffffffffffffffffffffffffffffffff16610c756110a7565b73ffffffffffffffffffffffffffffffffffffffff1614610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290612630565b60405180910390fd5b610cd56000611ae2565b565b610cdf6119cb565b73ffffffffffffffffffffffffffffffffffffffff16610cfd6110a7565b73ffffffffffffffffffffffffffffffffffffffff1614610d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4a90612630565b60405180910390fd5b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600681604051610da89190612994565b908152602001604051809103902060009054906101000a900460ff16610e03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfa906129f7565b60405180910390fd5b600060058585604051610e17929190612680565b9081526020016040518091039020905060006003811115610e3b57610e3a612324565b5b8160060160009054906101000a900460ff166003811115610e5f57610e5e612324565b5b14610e9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9690612a63565b60405180910390fd5b82610eab576002610eae565b60035b8160060160006101000a81548160ff02191690836003811115610ed457610ed3612324565b5b02179055508060040154600460008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f5091906128ac565b925050819055508060040154600460008360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fce91906128ac565b925050819055505050505050565b610fe46119cb565b73ffffffffffffffffffffffffffffffffffffffff166110026110a7565b73ffffffffffffffffffffffffffffffffffffffff1614611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90612630565b60405180910390fd5b610fa081111561109d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109490612acf565b60405180910390fd5b8060018190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6110d86119cb565b73ffffffffffffffffffffffffffffffffffffffff166110f66110a7565b73ffffffffffffffffffffffffffffffffffffffff161461114c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114390612630565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b390612b3b565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60046020528060005260406000206000915090505481565b6112206119cb565b73ffffffffffffffffffffffffffffffffffffffff1661123e6110a7565b73ffffffffffffffffffffffffffffffffffffffff1614611294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128b90612630565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fb90612ba7565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6113506119cb565b73ffffffffffffffffffffffffffffffffffffffff1661136e6110a7565b73ffffffffffffffffffffffffffffffffffffffff16146113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90612630565b60405180910390fd5b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506006816040516114199190612994565b908152602001604051809103902060009054906101000a900460ff16611474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146b906129f7565b60405180910390fd5b600060058585604051611488929190612680565b90815260200160405180910390209050600060038111156114ac576114ab612324565b5b8160060160009054906101000a900460ff1660038111156114d0576114cf612324565b5b14611510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150790612a63565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806115bd57508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b6115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f390612c39565b60405180910390fd5b60018160060160006101000a81548160ff0219169083600381111561162457611623612324565b5b0217905550828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160040154600261167f9190612c59565b905060006127108360050154836116969190612c59565b6116a09190612ce2565b905080826116ae919061280c565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116fc91906128ac565b92505081905550611770600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166119d39092919063ffffffff16565b50505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117cd6119cb565b73ffffffffffffffffffffffffffffffffffffffff166117eb6110a7565b73ffffffffffffffffffffffffffffffffffffffff1614611841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183890612630565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a890612d85565b60405180910390fd5b6118ba81611ae2565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611971576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196890612df1565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119c091906128ac565b925050819055505050565b600033905090565b611a548363a9059cbb60e01b84846040516024016119f2929190612e11565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ba6565b505050565b611adc846323b872dd60e01b858585604051602401611a7a93929190612e3a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ba6565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611c08826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611c6d9092919063ffffffff16565b9050600081511115611c685780806020019051810190611c289190612e86565b611c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5e90612f25565b60405180910390fd5b5b505050565b6060611c7c8484600085611c85565b90509392505050565b606082471015611cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc190612fb7565b60405180910390fd5b611cd385611d99565b611d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0990613023565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611d3b919061308a565b60006040518083038185875af1925050503d8060008114611d78576040519150601f19603f3d011682016040523d82523d6000602084013e611d7d565b606091505b5091509150611d8d828286611dbc565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611dcc57829050611e1c565b600083511115611ddf5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1391906130a1565b60405180910390fd5b9392505050565b828054611e2f90612931565b90600052602060002090601f016020900481019282611e515760008555611e98565b82601f10611e6a57805160ff1916838001178555611e98565b82800160010185558215611e98579182015b82811115611e97578251825591602001919060010190611e7c565b5b509050611ea59190611ea9565b5090565b5b80821115611ec2576000816000905550600101611eaa565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f2d82611ee4565b810181811067ffffffffffffffff82111715611f4c57611f4b611ef5565b5b80604052505050565b6000611f5f611ec6565b9050611f6b8282611f24565b919050565b600067ffffffffffffffff821115611f8b57611f8a611ef5565b5b611f9482611ee4565b9050602081019050919050565b82818337600083830152505050565b6000611fc3611fbe84611f70565b611f55565b905082815260208101848484011115611fdf57611fde611edf565b5b611fea848285611fa1565b509392505050565b600082601f83011261200757612006611eda565b5b8135612017848260208601611fb0565b91505092915050565b60006020828403121561203657612035611ed0565b5b600082013567ffffffffffffffff81111561205457612053611ed5565b5b61206084828501611ff2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061209482612069565b9050919050565b6120a481612089565b82525050565b60006020820190506120bf600083018461209b565b92915050565b600080fd5b600080fd5b60008083601f8401126120e5576120e4611eda565b5b8235905067ffffffffffffffff811115612102576121016120c5565b5b60208301915083600182028301111561211e5761211d6120ca565b5b9250929050565b61212e81612089565b811461213957600080fd5b50565b60008135905061214b81612125565b92915050565b6000819050919050565b61216481612151565b811461216f57600080fd5b50565b6000813590506121818161215b565b92915050565b6000806000806000608086880312156121a3576121a2611ed0565b5b600086013567ffffffffffffffff8111156121c1576121c0611ed5565b5b6121cd888289016120cf565b955095505060206121e08882890161213c565b93505060406121f18882890161213c565b925050606061220288828901612172565b9150509295509295909350565b61221881612151565b82525050565b6000602082019050612233600083018461220f565b92915050565b60006020828403121561224f5761224e611ed0565b5b600061225d84828501612172565b91505092915050565b60008115159050919050565b61227b81612266565b82525050565b60006020820190506122966000830184612272565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122d65780820151818401526020810190506122bb565b838111156122e5576000848401525b50505050565b60006122f68261229c565b61230081856122a7565b93506123108185602086016122b8565b61231981611ee4565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061236457612363612324565b5b50565b600081905061237582612353565b919050565b600061238582612367565b9050919050565b6123958161237a565b82525050565b600060e08201905081810360008301526123b5818a6122eb565b90506123c4602083018961209b565b6123d1604083018861209b565b6123de606083018761209b565b6123eb608083018661220f565b6123f860a083018561220f565b61240560c083018461238c565b98975050505050505050565b61241a81612266565b811461242557600080fd5b50565b60008135905061243781612411565b92915050565b60008060006040848603121561245657612455611ed0565b5b600084013567ffffffffffffffff81111561247457612473611ed5565b5b612480868287016120cf565b9350935050602061249386828701612428565b9150509250925092565b6000602082840312156124b3576124b2611ed0565b5b60006124c18482850161213c565b91505092915050565b6000806000604084860312156124e3576124e2611ed0565b5b600084013567ffffffffffffffff81111561250157612500611ed5565b5b61250d868287016120cf565b935093505060206125208682870161213c565b9150509250925092565b6000819050919050565b600061254f61254a61254584612069565b61252a565b612069565b9050919050565b600061256182612534565b9050919050565b600061257382612556565b9050919050565b61258381612568565b82525050565b600060208201905061259e600083018461257a565b92915050565b600080604083850312156125bb576125ba611ed0565b5b60006125c98582860161213c565b92505060206125da85828601612172565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061261a6020836122a7565b9150612625826125e4565b602082019050919050565b600060208201905081810360008301526126498161260d565b9050919050565b600081905092915050565b60006126678385612650565b9350612674838584611fa1565b82840190509392505050565b600061268d82848661265b565b91508190509392505050565b7f52657065617465642047616d6520494400000000000000000000000000000000600082015250565b60006126cf6010836122a7565b91506126da82612699565b602082019050919050565b600060208201905081810360008301526126fe816126c2565b9050919050565b7f496e73756666696369656e742042616c616e63653a506c617965722031000000600082015250565b600061273b601d836122a7565b915061274682612705565b602082019050919050565b6000602082019050818103600083015261276a8161272e565b9050919050565b7f496e73756666696369656e742042616c616e63653a506c617965722032000000600082015250565b60006127a7601d836122a7565b91506127b282612771565b602082019050919050565b600060208201905081810360008301526127d68161279a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061281782612151565b915061282283612151565b925082821015612835576128346127dd565b5b828203905092915050565b7f496e73756666696369656e742042616c616e6365000000000000000000000000600082015250565b60006128766014836122a7565b915061288182612840565b602082019050919050565b600060208201905081810360008301526128a581612869565b9050919050565b60006128b782612151565b91506128c283612151565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156128f7576128f66127dd565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061294957607f821691505b6020821081141561295d5761295c612902565b5b50919050565b600061296e8261229c565b6129788185612650565b93506129888185602086016122b8565b80840191505092915050565b60006129a08284612963565b915081905092915050565b7f47616d6520646f6573206e6f7420657869737400000000000000000000000000600082015250565b60006129e16013836122a7565b91506129ec826129ab565b602082019050919050565b60006020820190508181036000830152612a10816129d4565b9050919050565b7f47616d65206e6f7420696e20696e697469616c20737461746500000000000000600082015250565b6000612a4d6019836122a7565b9150612a5882612a17565b602082019050919050565b60006020820190508181036000830152612a7c81612a40565b9050919050565b7f466565207468726573686f6c6420657863656564656400000000000000000000600082015250565b6000612ab96016836122a7565b9150612ac482612a83565b602082019050919050565b60006020820190508181036000830152612ae881612aac565b9050919050565b7f496e76616c6964206665652077616c6c65740000000000000000000000000000600082015250565b6000612b256012836122a7565b9150612b3082612aef565b602082019050919050565b60006020820190508181036000830152612b5481612b18565b9050919050565b7f496e76616c696420626f6e757320616464726573730000000000000000000000600082015250565b6000612b916015836122a7565b9150612b9c82612b5b565b602082019050919050565b60006020820190508181036000830152612bc081612b84565b9050919050565b7f57696e6e65722061646472657373206973206e6f74206120706172746963697060008201527f616e740000000000000000000000000000000000000000000000000000000000602082015250565b6000612c236023836122a7565b9150612c2e82612bc7565b604082019050919050565b60006020820190508181036000830152612c5281612c16565b9050919050565b6000612c6482612151565b9150612c6f83612151565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ca857612ca76127dd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ced82612151565b9150612cf883612151565b925082612d0857612d07612cb3565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d6f6026836122a7565b9150612d7a82612d13565b604082019050919050565b60006020820190508181036000830152612d9e81612d62565b9050919050565b7f43616c6c6572206e6f7420626f6e757320636f6e747261637400000000000000600082015250565b6000612ddb6019836122a7565b9150612de682612da5565b602082019050919050565b60006020820190508181036000830152612e0a81612dce565b9050919050565b6000604082019050612e26600083018561209b565b612e33602083018461220f565b9392505050565b6000606082019050612e4f600083018661209b565b612e5c602083018561209b565b612e69604083018461220f565b949350505050565b600081519050612e8081612411565b92915050565b600060208284031215612e9c57612e9b611ed0565b5b6000612eaa84828501612e71565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612f0f602a836122a7565b9150612f1a82612eb3565b604082019050919050565b60006020820190508181036000830152612f3e81612f02565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612fa16026836122a7565b9150612fac82612f45565b604082019050919050565b60006020820190508181036000830152612fd081612f94565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061300d601d836122a7565b915061301882612fd7565b602082019050919050565b6000602082019050818103600083015261303c81613000565b9050919050565b600081519050919050565b600081905092915050565b600061306482613043565b61306e818561304e565b935061307e8185602086016122b8565b80840191505092915050565b60006130968284613059565b915081905092915050565b600060208201905081810360008301526130bb81846122eb565b90509291505056fea2646970667358221220010d5fd159b397a089728f7bd62b28331e4870d0d3b424c96a059b7fdeec284764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063f2373a5511610071578063f2373a551461031d578063f25f4b561461033b578063f2fde38b14610359578063fc0c546a14610375578063fca3fa7f146103935761012c565b80638da5cb5b1461027b57806390d49b9d14610299578063a56cc439146102b5578063c97f8363146102e5578063d1bb40a7146103015761012c565b80636400619e116100f45780636400619e146101d35780636d20931a14610203578063715018a614610239578063733f90ae146102435780638d4cc5451461025f5761012c565b80633c07d9ef146101315780633f15670c146101615780634e014fa51461017d57806350baa6221461019b5780636215be77146101b7575b600080fd5b61014b60048036038101906101469190612020565b6103af565b60405161015891906120aa565b60405180910390f35b61017b60048036038101906101769190612187565b6103f8565b005b6101856108fa565b604051610192919061221e565b60405180910390f35b6101b560048036038101906101b09190612239565b610900565b005b6101d160048036038101906101cc9190612239565b610a26565b005b6101ed60048036038101906101e89190612020565b610acc565b6040516101fa9190612281565b60405180910390f35b61021d60048036038101906102189190612020565b610b02565b604051610230979695949392919061239b565b60405180910390f35b610241610c4f565b005b61025d6004803603810190610258919061243d565b610cd7565b005b61027960048036038101906102749190612239565b610fdc565b005b6102836110a7565b60405161029091906120aa565b60405180910390f35b6102b360048036038101906102ae919061249d565b6110d0565b005b6102cf60048036038101906102ca919061249d565b611200565b6040516102dc919061221e565b60405180910390f35b6102ff60048036038101906102fa919061249d565b611218565b005b61031b600480360381019061031691906124ca565b611348565b005b610325611779565b60405161033291906120aa565b60405180910390f35b61034361179f565b60405161035091906120aa565b60405180910390f35b610373600480360381019061036e919061249d565b6117c5565b005b61037d6118bd565b60405161038a9190612589565b60405180910390f35b6103ad60048036038101906103a891906125a4565b6118e1565b005b6007818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104006119cb565b73ffffffffffffffffffffffffffffffffffffffff1661041e6110a7565b73ffffffffffffffffffffffffffffffffffffffff1614610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046b90612630565b60405180910390fd5b60068585604051610486929190612680565b908152602001604051809103902060009054906101000a900460ff16156104e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d9906126e5565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b90612751565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd906127bd565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610635919061280c565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461068b919061280c565b925050819055506001600686866040516106a6929190612680565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506040518060e0016040528086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200182815260200160015481526020016000600381111561079757610796612324565b5b815250600586866040516107ac929190612680565b908152602001604051809103902060008201518160000190805190602001906107d6929190611e23565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff021916908360038111156108eb576108ea612324565b5b02179055509050505050505050565b60015481565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610982576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109799061288c565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109d1919061280c565b92505081905550610a2333827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166119d39092919063ffffffff16565b50565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a7591906128ac565b92505081905550610ac93330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611a59909392919063ffffffff16565b50565b6006818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b600581805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610b3b90612931565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6790612931565b8015610bb45780601f10610b8957610100808354040283529160200191610bb4565b820191906000526020600020905b815481529060010190602001808311610b9757829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154908060060160009054906101000a900460ff16905087565b610c576119cb565b73ffffffffffffffffffffffffffffffffffffffff16610c756110a7565b73ffffffffffffffffffffffffffffffffffffffff1614610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290612630565b60405180910390fd5b610cd56000611ae2565b565b610cdf6119cb565b73ffffffffffffffffffffffffffffffffffffffff16610cfd6110a7565b73ffffffffffffffffffffffffffffffffffffffff1614610d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4a90612630565b60405180910390fd5b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050600681604051610da89190612994565b908152602001604051809103902060009054906101000a900460ff16610e03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfa906129f7565b60405180910390fd5b600060058585604051610e17929190612680565b9081526020016040518091039020905060006003811115610e3b57610e3a612324565b5b8160060160009054906101000a900460ff166003811115610e5f57610e5e612324565b5b14610e9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9690612a63565b60405180910390fd5b82610eab576002610eae565b60035b8160060160006101000a81548160ff02191690836003811115610ed457610ed3612324565b5b02179055508060040154600460008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f5091906128ac565b925050819055508060040154600460008360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fce91906128ac565b925050819055505050505050565b610fe46119cb565b73ffffffffffffffffffffffffffffffffffffffff166110026110a7565b73ffffffffffffffffffffffffffffffffffffffff1614611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90612630565b60405180910390fd5b610fa081111561109d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109490612acf565b60405180910390fd5b8060018190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6110d86119cb565b73ffffffffffffffffffffffffffffffffffffffff166110f66110a7565b73ffffffffffffffffffffffffffffffffffffffff161461114c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114390612630565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b390612b3b565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60046020528060005260406000206000915090505481565b6112206119cb565b73ffffffffffffffffffffffffffffffffffffffff1661123e6110a7565b73ffffffffffffffffffffffffffffffffffffffff1614611294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128b90612630565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fb90612ba7565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6113506119cb565b73ffffffffffffffffffffffffffffffffffffffff1661136e6110a7565b73ffffffffffffffffffffffffffffffffffffffff16146113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90612630565b60405180910390fd5b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506006816040516114199190612994565b908152602001604051809103902060009054906101000a900460ff16611474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146b906129f7565b60405180910390fd5b600060058585604051611488929190612680565b90815260200160405180910390209050600060038111156114ac576114ab612324565b5b8160060160009054906101000a900460ff1660038111156114d0576114cf612324565b5b14611510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150790612a63565b60405180910390fd5b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806115bd57508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b6115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f390612c39565b60405180910390fd5b60018160060160006101000a81548160ff0219169083600381111561162457611623612324565b5b0217905550828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160040154600261167f9190612c59565b905060006127108360050154836116969190612c59565b6116a09190612ce2565b905080826116ae919061280c565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116fc91906128ac565b92505081905550611770600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166119d39092919063ffffffff16565b50505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117cd6119cb565b73ffffffffffffffffffffffffffffffffffffffff166117eb6110a7565b73ffffffffffffffffffffffffffffffffffffffff1614611841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183890612630565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a890612d85565b60405180910390fd5b6118ba81611ae2565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611971576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196890612df1565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119c091906128ac565b925050819055505050565b600033905090565b611a548363a9059cbb60e01b84846040516024016119f2929190612e11565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ba6565b505050565b611adc846323b872dd60e01b858585604051602401611a7a93929190612e3a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ba6565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611c08826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611c6d9092919063ffffffff16565b9050600081511115611c685780806020019051810190611c289190612e86565b611c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5e90612f25565b60405180910390fd5b5b505050565b6060611c7c8484600085611c85565b90509392505050565b606082471015611cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc190612fb7565b60405180910390fd5b611cd385611d99565b611d12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0990613023565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611d3b919061308a565b60006040518083038185875af1925050503d8060008114611d78576040519150601f19603f3d011682016040523d82523d6000602084013e611d7d565b606091505b5091509150611d8d828286611dbc565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611dcc57829050611e1c565b600083511115611ddf5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1391906130a1565b60405180910390fd5b9392505050565b828054611e2f90612931565b90600052602060002090601f016020900481019282611e515760008555611e98565b82601f10611e6a57805160ff1916838001178555611e98565b82800160010185558215611e98579182015b82811115611e97578251825591602001919060010190611e7c565b5b509050611ea59190611ea9565b5090565b5b80821115611ec2576000816000905550600101611eaa565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f2d82611ee4565b810181811067ffffffffffffffff82111715611f4c57611f4b611ef5565b5b80604052505050565b6000611f5f611ec6565b9050611f6b8282611f24565b919050565b600067ffffffffffffffff821115611f8b57611f8a611ef5565b5b611f9482611ee4565b9050602081019050919050565b82818337600083830152505050565b6000611fc3611fbe84611f70565b611f55565b905082815260208101848484011115611fdf57611fde611edf565b5b611fea848285611fa1565b509392505050565b600082601f83011261200757612006611eda565b5b8135612017848260208601611fb0565b91505092915050565b60006020828403121561203657612035611ed0565b5b600082013567ffffffffffffffff81111561205457612053611ed5565b5b61206084828501611ff2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061209482612069565b9050919050565b6120a481612089565b82525050565b60006020820190506120bf600083018461209b565b92915050565b600080fd5b600080fd5b60008083601f8401126120e5576120e4611eda565b5b8235905067ffffffffffffffff811115612102576121016120c5565b5b60208301915083600182028301111561211e5761211d6120ca565b5b9250929050565b61212e81612089565b811461213957600080fd5b50565b60008135905061214b81612125565b92915050565b6000819050919050565b61216481612151565b811461216f57600080fd5b50565b6000813590506121818161215b565b92915050565b6000806000806000608086880312156121a3576121a2611ed0565b5b600086013567ffffffffffffffff8111156121c1576121c0611ed5565b5b6121cd888289016120cf565b955095505060206121e08882890161213c565b93505060406121f18882890161213c565b925050606061220288828901612172565b9150509295509295909350565b61221881612151565b82525050565b6000602082019050612233600083018461220f565b92915050565b60006020828403121561224f5761224e611ed0565b5b600061225d84828501612172565b91505092915050565b60008115159050919050565b61227b81612266565b82525050565b60006020820190506122966000830184612272565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122d65780820151818401526020810190506122bb565b838111156122e5576000848401525b50505050565b60006122f68261229c565b61230081856122a7565b93506123108185602086016122b8565b61231981611ee4565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061236457612363612324565b5b50565b600081905061237582612353565b919050565b600061238582612367565b9050919050565b6123958161237a565b82525050565b600060e08201905081810360008301526123b5818a6122eb565b90506123c4602083018961209b565b6123d1604083018861209b565b6123de606083018761209b565b6123eb608083018661220f565b6123f860a083018561220f565b61240560c083018461238c565b98975050505050505050565b61241a81612266565b811461242557600080fd5b50565b60008135905061243781612411565b92915050565b60008060006040848603121561245657612455611ed0565b5b600084013567ffffffffffffffff81111561247457612473611ed5565b5b612480868287016120cf565b9350935050602061249386828701612428565b9150509250925092565b6000602082840312156124b3576124b2611ed0565b5b60006124c18482850161213c565b91505092915050565b6000806000604084860312156124e3576124e2611ed0565b5b600084013567ffffffffffffffff81111561250157612500611ed5565b5b61250d868287016120cf565b935093505060206125208682870161213c565b9150509250925092565b6000819050919050565b600061254f61254a61254584612069565b61252a565b612069565b9050919050565b600061256182612534565b9050919050565b600061257382612556565b9050919050565b61258381612568565b82525050565b600060208201905061259e600083018461257a565b92915050565b600080604083850312156125bb576125ba611ed0565b5b60006125c98582860161213c565b92505060206125da85828601612172565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061261a6020836122a7565b9150612625826125e4565b602082019050919050565b600060208201905081810360008301526126498161260d565b9050919050565b600081905092915050565b60006126678385612650565b9350612674838584611fa1565b82840190509392505050565b600061268d82848661265b565b91508190509392505050565b7f52657065617465642047616d6520494400000000000000000000000000000000600082015250565b60006126cf6010836122a7565b91506126da82612699565b602082019050919050565b600060208201905081810360008301526126fe816126c2565b9050919050565b7f496e73756666696369656e742042616c616e63653a506c617965722031000000600082015250565b600061273b601d836122a7565b915061274682612705565b602082019050919050565b6000602082019050818103600083015261276a8161272e565b9050919050565b7f496e73756666696369656e742042616c616e63653a506c617965722032000000600082015250565b60006127a7601d836122a7565b91506127b282612771565b602082019050919050565b600060208201905081810360008301526127d68161279a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061281782612151565b915061282283612151565b925082821015612835576128346127dd565b5b828203905092915050565b7f496e73756666696369656e742042616c616e6365000000000000000000000000600082015250565b60006128766014836122a7565b915061288182612840565b602082019050919050565b600060208201905081810360008301526128a581612869565b9050919050565b60006128b782612151565b91506128c283612151565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156128f7576128f66127dd565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061294957607f821691505b6020821081141561295d5761295c612902565b5b50919050565b600061296e8261229c565b6129788185612650565b93506129888185602086016122b8565b80840191505092915050565b60006129a08284612963565b915081905092915050565b7f47616d6520646f6573206e6f7420657869737400000000000000000000000000600082015250565b60006129e16013836122a7565b91506129ec826129ab565b602082019050919050565b60006020820190508181036000830152612a10816129d4565b9050919050565b7f47616d65206e6f7420696e20696e697469616c20737461746500000000000000600082015250565b6000612a4d6019836122a7565b9150612a5882612a17565b602082019050919050565b60006020820190508181036000830152612a7c81612a40565b9050919050565b7f466565207468726573686f6c6420657863656564656400000000000000000000600082015250565b6000612ab96016836122a7565b9150612ac482612a83565b602082019050919050565b60006020820190508181036000830152612ae881612aac565b9050919050565b7f496e76616c6964206665652077616c6c65740000000000000000000000000000600082015250565b6000612b256012836122a7565b9150612b3082612aef565b602082019050919050565b60006020820190508181036000830152612b5481612b18565b9050919050565b7f496e76616c696420626f6e757320616464726573730000000000000000000000600082015250565b6000612b916015836122a7565b9150612b9c82612b5b565b602082019050919050565b60006020820190508181036000830152612bc081612b84565b9050919050565b7f57696e6e65722061646472657373206973206e6f74206120706172746963697060008201527f616e740000000000000000000000000000000000000000000000000000000000602082015250565b6000612c236023836122a7565b9150612c2e82612bc7565b604082019050919050565b60006020820190508181036000830152612c5281612c16565b9050919050565b6000612c6482612151565b9150612c6f83612151565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ca857612ca76127dd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ced82612151565b9150612cf883612151565b925082612d0857612d07612cb3565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d6f6026836122a7565b9150612d7a82612d13565b604082019050919050565b60006020820190508181036000830152612d9e81612d62565b9050919050565b7f43616c6c6572206e6f7420626f6e757320636f6e747261637400000000000000600082015250565b6000612ddb6019836122a7565b9150612de682612da5565b602082019050919050565b60006020820190508181036000830152612e0a81612dce565b9050919050565b6000604082019050612e26600083018561209b565b612e33602083018461220f565b9392505050565b6000606082019050612e4f600083018661209b565b612e5c602083018561209b565b612e69604083018461220f565b949350505050565b600081519050612e8081612411565b92915050565b600060208284031215612e9c57612e9b611ed0565b5b6000612eaa84828501612e71565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612f0f602a836122a7565b9150612f1a82612eb3565b604082019050919050565b60006020820190508181036000830152612f3e81612f02565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612fa16026836122a7565b9150612fac82612f45565b604082019050919050565b60006020820190508181036000830152612fd081612f94565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061300d601d836122a7565b915061301882612fd7565b602082019050919050565b6000602082019050818103600083015261303c81613000565b9050919050565b600081519050919050565b600081905092915050565b600061306482613043565b61306e818561304e565b935061307e8185602086016122b8565b80840191505092915050565b60006130968284613059565b915081905092915050565b600060208201905081810360008301526130bb81846122eb565b90509291505056fea2646970667358221220010d5fd159b397a089728f7bd62b28331e4870d0d3b424c96a059b7fdeec284764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PLSGame.sol:PLSGame",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1371,
        "contract": "contracts/PLSGame.sol:PLSGame",
        "label": "platFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1376,
        "contract": "contracts/PLSGame.sol:PLSGame",
        "label": "feeWallet",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1378,
        "contract": "contracts/PLSGame.sol:PLSGame",
        "label": "plsBonus",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1382,
        "contract": "contracts/PLSGame.sol:PLSGame",
        "label": "wallet",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1387,
        "contract": "contracts/PLSGame.sol:PLSGame",
        "label": "games",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Game)1368_storage)"
      },
      {
        "astId": 1391,
        "contract": "contracts/PLSGame.sol:PLSGame",
        "label": "gameExists",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 1395,
        "contract": "contracts/PLSGame.sol:PLSGame",
        "label": "refundClaimed",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)1352": {
        "encoding": "inplace",
        "label": "enum PLSGame.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Game)1368_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct PLSGame.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)1368_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Game)1368_storage": {
        "encoding": "inplace",
        "label": "struct PLSGame.Game",
        "members": [
          {
            "astId": 1354,
            "contract": "contracts/PLSGame.sol:PLSGame",
            "label": "gameId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1356,
            "contract": "contracts/PLSGame.sol:PLSGame",
            "label": "player1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1358,
            "contract": "contracts/PLSGame.sol:PLSGame",
            "label": "player2",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1360,
            "contract": "contracts/PLSGame.sol:PLSGame",
            "label": "winner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1362,
            "contract": "contracts/PLSGame.sol:PLSGame",
            "label": "deposit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1364,
            "contract": "contracts/PLSGame.sol:PLSGame",
            "label": "platFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1367,
            "contract": "contracts/PLSGame.sol:PLSGame",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(Status)1352"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}